import sys
import os
from operator import itemgetter
from typing import List, Optional

from langchain_community.vectorstores import FAISS
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from langchain_core.messages import BaseMessage

from utils.model_loader import ModelLoader
from logger.custom_logger import CustomLogger
from exception.custom_exception import DocumentPortalException
from prompt.prompt_library import PROMPT_REGISTERY
from model.models import PromptType

import streamlit as st
os.environ['KMP_DUPLICATE_LIB_OK']='TRUE'

class ConversationalRAG:
    '''Class to handle conversational retrieval-augmented generation (RAG) using LangChain.'''
    def __init__(self, session_id: str, retriever=None):
        try:
            self.log = CustomLogger().get_logger()
            self.session_id = session_id
            self.llm = self._load_llm()
            self.contextualize_prompt = PROMPT_REGISTERY[PromptType.CONTEXTUALIZE_QUESTION.value]
            self.qa_prompt = PROMPT_REGISTERY[PromptType.CONTEXT_QA.value]
            if retriever is None:
                raise ValueError("Retriever cannot be None")
            self.retriever = retriever
            self._build_lcel_chain()
            self.log.info("ConversationalRAG initialized successfully", session_id=self.session_id)
        except Exception as e:
            self.log.error("Error in initializing ConversationalRAG", error=str(e))
            raise DocumentPortalException("Initialization error in ConversationalRAG", sys)
        

    def load_retriever_from_faiss(self, index_path: str):
        '''Load FAISS retriever and fetch relevant documents based on the query.'''
        try:
            embeddings = ModelLoader().load_embeddings()
            if not os.path.isdir(index_path):
                raise FileNotFoundError(f"FAISS index directory not found at: {index_path}")
            vector_store = FAISS.load_local(index_path, embeddings, allow_dangerous_deserialization=True)
            self.retriever = vector_store.as_retriever(search_type="similarity", search_kwargs={"k": 5})
            self.log.info("FAISS retriever loaded successfully", index_path=index_path, session_id=self.session_id)
            return self.retriever

        except Exception as e:
            self.log.error("Error in loading retriever from FAISS", error=str(e))
            raise DocumentPortalException("Error in loading retriever from FAISS", sys)

    def invoke(self, user_input: str, chat_history: Optional[list[BaseMessage]] = None) -> str:
        '''Invoke the LangChain chain for conversational RAG.'''
        try:
            chat_history = chat_history or []
            payload = {"input": user_input, "chat_history": chat_history}
            self.chain.invoke(payload)
            answer = self.chain.invoke(payload)
            if not answer:
                self.log.warning("No answer generated by the chain", session_id=self.session_id)
                return "No, answer could be generated."
            self.log.info("ConversationalRAG invoked successfully", 
                          session_id=self.session_id,
                          user_input=user_input,
                          answer_preview=answer[:150]) 
            return answer
                   
        except Exception as e:
            self.log.error("Error in invoking ConversationalRAG", error=str(e))
            raise DocumentPortalException("Error in invoking ConversationalRAG", sys)

    def _load_llm(self):
        '''Load the language model using ModelLoader.'''
        try:
            llm = ModelLoader().load_llm()
            if llm is None:
                raise ValueError("LLM could not be loaded")
            self.log.info("LLM loaded successfully", session_id=self.session_id)
            return llm
        except Exception as e:
            self.log.error("Error in loading LLM", error=str(e))
            raise DocumentPortalException("Error in loading LLM", sys)

    @staticmethod
    def _format_docs(documents):
        '''Format retrieved documents into a single string.'''
        return "\n\n".join(doc.page_content for doc in documents)

    def _build_lcel_chain(self):
        '''Build the LangChain chain for conversational RAG.'''
        try:
            question_rewriter = ({'input': itemgetter('input'),
                                  'chat_history': itemgetter('chat_history')} | self.contextualize_prompt | self.llm|StrOutputParser())
            
            retrieve_docs = question_rewriter | self.retriever | self._format_docs
            self.chain = ({'context': retrieve_docs,
                           'input' : itemgetter('input'),
                           'chat_history': itemgetter('chat_history')} | self.qa_prompt | self.llm | StrOutputParser())
            self.log.info("LCEL chain built successfully", session_id=self.session_id)
        except Exception as e:
            self.log.error("Error in building LCEL chain", error=str(e))
            raise DocumentPortalException("Error in building LCEL chain", sys)