import sys
import os
from dotenv import load_dotenv
from langchain_community.vectorstores import FAISS
from langchain_core.chat_history import BaseChatMessageHistory
from langchain_community.chat_message_histories import ChatMessageHistory
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains import create_history_aware_retriever, create_retrieval_chain
from utils.model_loader import ModelLoader
from logger.custom_logger import CustomLogger
from exception.custom_exception import DocumentPortalException
from prompt.prompt_library import PROMPT_REGISTERY
from model.models import PromptType
import streamlit as st

import os
os.environ['KMP_DUPLICATE_LIB_OK']='TRUE'

class ConversationalRAG:
    def __init__(self, session_id: str, retriever):
        self.log = CustomLogger().get_logger(__name__)
        self.session_id = session_id
        self.retriever = retriever
        try:
            
            self.llm = self._load_llm()
            self.contextualize_prompt = PROMPT_REGISTERY[PromptType.CONTEXTUALIZE_QUESTION.value]
            self.qa_prompt = PROMPT_REGISTERY[PromptType.CONTEXT_QA.value]
            self.history_aware_retriever = create_history_aware_retriever(self.llm, self.retriever, self.contextualize_prompt)
            self.log.info("ConversationalRAG initialized successfully", session_id=self.session_id)
            self.qa_chain = create_stuff_documents_chain(llm=self.llm, prompt=self.qa_prompt)
            self.rag_chain = create_retrieval_chain(self.history_aware_retriever, self.qa_chain)
            self.log.info("RAG chain created successfully", session_id=self.session_id)
            self.chain = RunnableWithMessageHistory(self.rag_chain, 
                                                    self._get_session_history,
                                                    input_messages_key="input",
                                                    history_messages_key="chat_history",
                                                    output_messages_key="answer"
                                                    )
            self.log.info("RunnableWithMessageHistory chain created successfully", session_id=self.session_id)
        except Exception as e:
            self.log.error("Error in initializing ConversationalRAG", error=str(e))
            raise DocumentPortalException("Initialization error in ConversationalRAG", sys)
    def _load_llm(self):
        try:
            llm = ModelLoader().load_llm()
            self.log.info("LLM loaded successfully", class_name=llm.__class__.__name__)
            return llm
        except Exception as e:
            self.log.error("Error in load_llm method", error=str(e))
            raise DocumentPortalException("Error in load_llm method", sys)
        
    def _get_session_history(self, session_id: str)-> BaseChatMessageHistory:
        try:
            if "store" not in st.session_state:
                st.session_state.store = {}
            if session_id not in st.session_state.store:
                st.session_state.store[session_id] = ChatMessageHistory()
                self.log.info("New chat session history created", session_id=session_id)
            return st.session_state.store[session_id]
        except Exception as e:
            self.log.error("Error in get_session_history method", error=str(e))
            raise DocumentPortalException("Error in get_session_history method", sys)
    
    def load_retriever_from_faiss(self, index_path: str):
        try:
            embeddings = ModelLoader().load_embeddings()
            if not os.path.isdir(index_path):
                raise FileNotFoundError(f"FAISS index directory does not exist: {index_path}")
            vector_store = FAISS.load_local(index_path, embeddings)
            retriever = vector_store.as_retriever(search_type="similarity", search_kwargs={"k": 5})
            self.log.info("FAISS retriever loaded successfully", index_path=index_path)
            return retriever
        except Exception as e:
            self.log.error("Error in load_retriever_from_faiss method", error=str(e))
            raise DocumentPortalException("Error in load_retriever_from_faiss method", sys)
        
    def invoke(self, user_input: str)-> str:
        try:
            response = self.chain.invoke({"input" : user_input},
                               config={"configurable": {"session_id": self.session_id}})
            answer = response.get("answer", "No answer")
            if not answer:
                self.log.warning("No answer generated by the RAG chain", session_id=self.session_id)
            self.log.info("RAG chain invoked successfully", session_id=self.session_id, user_input=user_input, answer=answer)
            return answer
        except Exception as e:
            self.log.error("Error in invoke method", error=str(e))
            raise DocumentPortalException("Error in invoke method", sys)